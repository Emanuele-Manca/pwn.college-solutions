// \\b(SIG)([^ \\']*)|\\d+

/*
    [ "SIGUSR1", "SIGUSR2", "SIGINT", "SIGABRT", "SIGHUP" ]
        10          12          2        6           1
*/
#include <regex>
#include <iostream>
#include <string>
#include <map>
#include <csignal>
#include <sys/types.h>
#include <unistd.h>
#include <iterator>

using namespace std;

int main(){

    string str;
    getline(cin, str);

    //cout << "READ: " << str << endl;

    map<string, int> m
        {{"SIGUSR1", 10}, {"SIGUSR2", 12}, {"SIGINT", 2}, {"SIGABRT", 6}, {"SIGHUP", 1}};

    regex pattern("\\b(SIG)([^ \\']*)|\\d+");
    sregex_iterator indx(str.begin(), str.end(), pattern);
    sregex_iterator end;

    cout << distance(indx, end) << endl;

    int pid = atoi(indx->str().c_str());

    int i = 0;
    while(++indx != end){
        cout << "(" << i++ << ") SEND: " << indx->str() << endl;
        sleep(1);
        kill(pid, m[indx->str()]);
    }
    
    return 0;
}
/*
#include <regex>
#include <iterator>
#include <iostream>
#include <string>
 
int main()
{
    const std::string s = "['SIGUSR1', 'SIGHUP', 'SIGINT', 'SIGUSR1', 'SIGUSR2', 'SIGUSR2', 'SIGUSR1', 'SIGHUP', 'SIGHUP', 'SIGUSR1', 'SIGHUP', 'SIGABRT', 'SIGUSR1', 'SIGHUP', 'SIGINT', 'SIGHUP', 'SIGUSR1', 'SIGHUP', 'SIGUSR2', 'SIGABRT', 'SIGHUP', 'SIGABRT', 'SIGABRT', 'SIGABRT', 'SIGHUP', 'SIGABRT', 'SIGUSR2', 'SIGUSR2', 'SIGUSR2', 'SIGUSR2', 'SIGUSR1', 'SIGUSR1', 'SIGHUP', 'SIGABRT', 'SIGUSR2', 'SIGHUP', 'SIGABRT', 'SIGUSR1', 'SIGHUP', 'SIGABRT', 'SIGINT', 'SIGHUP', 'SIGABRT', 'SIGUSR1', 'SIGUSR1', 'SIGUSR1', 'SIGUSR2', 'SIGINT', 'SIGUSR1', 'SIGUSR1', 'SIGHUP', 'SIGHUP', 'SIGUSR1', 'SIGINT', 'SIGUSR2', 'SIGUSR1', 'SIGUSR1', 'SIGUSR2', 'SIGINT', 'SIGHUP', 'SIGHUP', 'SIGHUP', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGABRT', 'SIGUSR2', 'SIGUSR1', 'SIGHUP', 'SIGUSR1', 'SIGUSR1', 'SIGUSR1', 'SIGINT', 'SIGUSR2', 'SIGUSR2', 'SIGABRT', 'SIGUSR1', 'SIGUSR1', 'SIGINT', 'SIGUSR2', 'SIGUSR1', 'SIGHUP', 'SIGINT', 'SIGUSR1', 'SIGHUP', 'SIGUSR2', 'SIGUSR2', 'SIGABRT', 'SIGUSR2', 'SIGUSR1', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGUSR2', 'SIGHUP', 'SIGINT', 'SIGUSR2', 'SIGABRT', 'SIGINT', 'SIGINT', 'SIGUSR2', 'SIGUSR2', 'SIGINT', 'SIGUSR1', 'SIGUSR2', 'SIGHUP', 'SIGABRT', 'SIGINT', 'SIGUSR1', 'SIGUSR2', 'SIGHUP', 'SIGUSR2', 'SIGUSR1', 'SIGHUP', 'SIGINT', 'SIGHUP', 'SIGUSR1', 'SIGUSR1', 'SIGUSR1', 'SIGINT', 'SIGABRT', 'SIGUSR2', 'SIGINT', 'SIGUSR2', 'SIGABRT', 'SIGUSR1', 'SIGUSR1', 'SIGHUP', 'SIGINT', 'SIGUSR1', 'SIGINT', 'SIGINT', 'SIGUSR1', 'SIGINT', 'SIGUSR2', 'SIGHUP', 'SIGUSR2', 'SIGABRT', 'SIGUSR2', 'SIGUSR2', 'SIGHUP', 'SIGUSR2', 'SIGUSR2', 'SIGHUP', 'SIGABRT', 'SIGABRT', 'SIGUSR1', 'SIGUSR1', 'SIGINT', 'SIGHUP', 'SIGHUP', 'SIGUSR2', 'SIGABRT', 'SIGABRT', 'SIGHUP', 'SIGUSR1', 'SIGUSR2', 'SIGHUP', 'SIGINT', 'SIGINT', 'SIGUSR1', 'SIGHUP', 'SIGINT', 'SIGHUP', 'SIGINT', 'SIGABRT', 'SIGUSR1', 'SIGINT', 'SIGABRT', 'SIGABRT', 'SIGABRT', 'SIGABRT', 'SIGINT', 'SIGINT', 'SIGUSR1', 'SIGHUP', 'SIGABRT', 'SIGABRT', 'SIGUSR2', 'SIGUSR2', 'SIGUSR1', 'SIGABRT', 'SIGHUP', 'SIGINT', 'SIGABRT', 'SIGABRT', 'SIGUSR1', 'SIGINT', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGINT', 'SIGUSR1', 'SIGINT', 'SIGABRT', 'SIGABRT', 'SIGHUP', 'SIGINT', 'SIGABRT', 'SIGUSR1', 'SIGHUP', 'SIGABRT', 'SIGABRT', 'SIGUSR2', 'SIGHUP', 'SIGABRT', 'SIGINT', 'SIGUSR2', 'SIGABRT', 'SIGINT', 'SIGINT', 'SIGABRT', 'SIGHUP', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGABRT', 'SIGUSR1', 'SIGUSR2', 'SIGABRT', 'SIGHUP', 'SIGINT', 'SIGHUP', 'SIGINT', 'SIGUSR2', 'SIGUSR1', 'SIGHUP', 'SIGABRT', 'SIGUSR2', 'SIGUSR2', 'SIGABRT', 'SIGHUP', 'SIGUSR1', 'SIGUSR1', 'SIGABRT', 'SIGINT', 'SIGUSR1', 'SIGUSR1', 'SIGHUP', 'SIGUSR1', 'SIGUSR1', 'SIGUSR1', 'SIGABRT', 'SIGUSR1', 'SIGUSR2', 'SIGINT', 'SIGHUP', 'SIGABRT', 'SIGINT', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGHUP', 'SIGHUP', 'SIGHUP', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGUSR2', 'SIGINT', 'SIGABRT', 'SIGHUP', 'SIGABRT', 'SIGABRT', 'SIGUSR1', 'SIGINT', 'SIGINT', 'SIGUSR1', 'SIGINT', 'SIGUSR2', 'SIGUSR2', 'SIGUSR1', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGUSR1', 'SIGINT', 'SIGHUP', 'SIGABRT', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGUSR2', 'SIGINT', 'SIGHUP', 'SIGHUP', 'SIGABRT', 'SIGABRT', 'SIGINT', 'SIGABRT', 'SIGINT', 'SIGINT', 'SIGHUP', 'SIGINT', 'SIGABRT', 'SIGINT', 'SIGHUP', 'SIGINT', 'SIGUSR1', 'SIGABRT', 'SIGHUP', 'SIGUSR1', 'SIGUSR2', 'SIGHUP', 'SIGUSR2', 'SIGABRT', 'SIGINT', 'SIGUSR1', 'SIGUSR2', 'SIGABRT', 'SIGUSR1', 'SIGINT', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGUSR1', 'SIGUSR2', 'SIGABRT', 'SIGABRT', 'SIGINT', 'SIGINT', 'SIGUSR2', 'SIGINT', 'SIGHUP', 'SIGABRT', 'SIGINT', 'SIGINT', 'SIGINT', 'SIGABRT', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGUSR1', 'SIGUSR1', 'SIGABRT', 'SIGINT', 'SIGHUP', 'SIGUSR1', 'SIGUSR2', 'SIGINT', 'SIGABRT', 'SIGHUP', 'SIGUSR2', 'SIGUSR2', 'SIGUSR2', 'SIGUSR2', 'SIGUSR2', 'SIGUSR1', 'SIGHUP', 'SIGUSR2', 'SIGUSR1', 'SIGUSR1', 'SIGUSR1', 'SIGHUP', 'SIGINT', 'SIGINT', 'SIGHUP', 'SIGHUP', 'SIGHUP', 'SIGINT', 'SIGUSR1', 'SIGINT', 'SIGABRT', 'SIGABRT', 'SIGUSR2', 'SIGUSR1', 'SIGABRT', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGUSR1', 'SIGUSR2', 'SIGUSR1', 'SIGABRT', 'SIGUSR2', 'SIGABRT', 'SIGHUP', 'SIGUSR1', 'SIGUSR2', 'SIGINT', 'SIGINT', 'SIGUSR1', 'SIGUSR1', 'SIGUSR1', 'SIGUSR2', 'SIGABRT', 'SIGABRT', 'SIGABRT', 'SIGUSR2', 'SIGUSR2', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGABRT', 'SIGINT', 'SIGINT', 'SIGUSR2', 'SIGINT', 'SIGUSR2', 'SIGINT', 'SIGUSR2', 'SIGUSR1', 'SIGUSR1', 'SIGABRT', 'SIGINT', 'SIGINT', 'SIGABRT', 'SIGUSR1', 'SIGUSR1', 'SIGUSR1', 'SIGUSR2', 'SIGHUP', 'SIGHUP', 'SIGABRT', 'SIGUSR1', 'SIGUSR2', 'SIGUSR1', 'SIGUSR1', 'SIGABRT', 'SIGINT', 'SIGUSR1', 'SIGHUP', 'SIGUSR1', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGABRT', 'SIGUSR2', 'SIGUSR1', 'SIGABRT', 'SIGUSR2', 'SIGHUP', 'SIGHUP', 'SIGINT', 'SIGUSR2', 'SIGUSR1', 'SIGUSR2', 'SIGHUP', 'SIGUSR1', 'SIGHUP', 'SIGHUP', 'SIGHUP', 'SIGINT', 'SIGUSR2', 'SIGABRT', 'SIGUSR1', 'SIGUSR1', 'SIGABRT', 'SIGINT', 'SIGHUP', 'SIGUSR2', 'SIGABRT', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGABRT', 'SIGUSR2', 'SIGINT', 'SIGUSR1', 'SIGUSR1', 'SIGUSR2', 'SIGABRT', 'SIGINT', 'SIGHUP', 'SIGINT', 'SIGUSR1', 'SIGINT', 'SIGINT', 'SIGINT', 'SIGINT', 'SIGABRT', 'SIGHUP', 'SIGINT', 'SIGINT', 'SIGUSR2', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGUSR1', 'SIGABRT', 'SIGHUP', 'SIGHUP', 'SIGABRT', 'SIGABRT', 'SIGUSR2', 'SIGHUP', 'SIGUSR1', 'SIGABRT', 'SIGABRT', 'SIGUSR2', 'SIGUSR1', 'SIGUSR2', 'SIGABRT', 'SIGABRT', 'SIGHUP', 'SIGUSR1', 'SIGABRT', 'SIGUSR1']";
 
    std::regex words_regex("\\b(SIG)([^ \\']*)");
    std::sregex_iterator words_begin(s.begin(), s.end(), words_regex);
    std::sregex_iterator words_end;
 
    std::cout << "Found " 
              << std::distance(words_begin, words_end) 
              << " words:\n";
 
    while (++words_begin != words_end) {
        std::cout << words_begin->str() << '\n';
    }   
}
*/